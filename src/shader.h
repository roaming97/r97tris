static const char *vertex_shader_src = "#version 430 core\nlayout(location=0)in vec3 aPos;\nlayout(location=1)in vec3 aColor;\nlayout(location=2)in vec2 aTexCoord;\nout vec3 ourColor;\nout vec2 texCoord;\nvoid main()\n{\ngl_Position=vec4(aPos,1.);\nourColor=aColor;\ntexCoord=aTexCoord;\n}\n";
static const char *fragment_shader_src= "#version 430 core\nout vec4 fragColor;\nin vec3 ourColor;\nin vec2 texCoord;\nuniform float iTime;\nuniform vec3 iResolution;\nuniform sampler2D fgTex;\nuniform sampler2D bgTex;\n\nvec4 layer(vec4 foreground,vec4 background){\nreturn foreground*foreground.a+background*(1.-foreground.a);\n}\n\nfloat map(vec3 p){\n\nvec3 q=sin(p*1.9);\n\nfloat w1=4.-abs(p.y)+(q.x+q.z)*.8;\nfloat w2=4.-abs(p.x)+(q.y+q.z)*.8;\n\nfloat s1=length(mod(p.xy+vec2(sin((p.z+p.x)*2.)*.25,cos((p.z+p.x)*1.)*.5),2.)-1.)-.2;\nfloat s2=length(mod(.5+p.yz+vec2(sin((p.z+p.x)*2.)*.25,cos((p.z+p.x)*1.)*.3),2.)-1.)-.2;\n\nreturn min(w1,min(w2,min(s1,s2)));\n\n}\n\nvec2 rot(vec2 p,float a){\nreturn vec2(\np.x*cos(a)-p.y*sin(a),\np.x*sin(a)+p.y*cos(a));\n}\n\nvoid main()\n{\nvec2 fromcenter=texCoord-vec2(.5,.5);\nfloat ratio=1;\nif(iResolution.x>=720.&&iResolution.y>=640.){\nratio=1.5;\n}\nif(iResolution.x>=1000.&&iResolution.y>=960.){\nratio=2.;\n}\nvec2 scale=vec2(1./(640.*ratio/iResolution.x),1./(480.*ratio/iResolution.y));\nvec2 scaled=fromcenter*scale;\nvec2 resultc=vec2(.5,.5)+scaled;\n\nvec4 bg=texture(bgTex,resultc);\nvec4 fg=texture(fgTex,resultc);\n\nvec2 uv=(2.*gl_FragCoord.xy-iResolution.xy)/iResolution.y;\nvec3 dir=normalize(vec3(uv,1.));\ndir.xz=rot(dir.xz,iTime*.23);dir=dir.yzx;\ndir.xz=rot(dir.xz,iTime*.2);dir=dir.yzx;\nvec3 pos=vec3(0,0,iTime);\nvec3 col=vec3(0.);\n\nfloat t=0.,tt;\n\nfor(int i=0;i<100;i++){\ntt=map(pos+dir*t);\nif(abs(tt)<.003)break;\nt+=tt*.7;\n}\n\nvec3 ip=pos+dir*t;\ncol=vec3(t*.1);\ncol=sqrt(col);\nvec4 shader=vec4(.05*t+abs(dir)*col+max(0.,map(ip-.1)-tt),1.);\n\nfragColor=mix(shader,fg,.95);\n}\n";